// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GCSFuseProxyServiceClient is the client API for GCSFuseProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GCSFuseProxyServiceClient interface {
	MountGCS(ctx context.Context, in *MountGCSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutGCPToken(ctx context.Context, in *PutGCPTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGCPTokenExpiry(ctx context.Context, in *GetGCPTokenExpiryRequest, opts ...grpc.CallOption) (*GetGCPTokenExpiryResponse, error)
	DeleteGCPToken(ctx context.Context, in *DeleteGCPTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gCSFuseProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGCSFuseProxyServiceClient(cc grpc.ClientConnInterface) GCSFuseProxyServiceClient {
	return &gCSFuseProxyServiceClient{cc}
}

func (c *gCSFuseProxyServiceClient) MountGCS(ctx context.Context, in *MountGCSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GCSFuseProxyService/MountGCS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSFuseProxyServiceClient) PutGCPToken(ctx context.Context, in *PutGCPTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GCSFuseProxyService/PutGCPToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSFuseProxyServiceClient) GetGCPTokenExpiry(ctx context.Context, in *GetGCPTokenExpiryRequest, opts ...grpc.CallOption) (*GetGCPTokenExpiryResponse, error) {
	out := new(GetGCPTokenExpiryResponse)
	err := c.cc.Invoke(ctx, "/GCSFuseProxyService/GetGCPTokenExpiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCSFuseProxyServiceClient) DeleteGCPToken(ctx context.Context, in *DeleteGCPTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/GCSFuseProxyService/DeleteGCPToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCSFuseProxyServiceServer is the server API for GCSFuseProxyService service.
// All implementations must embed UnimplementedGCSFuseProxyServiceServer
// for forward compatibility
type GCSFuseProxyServiceServer interface {
	MountGCS(context.Context, *MountGCSRequest) (*emptypb.Empty, error)
	PutGCPToken(context.Context, *PutGCPTokenRequest) (*emptypb.Empty, error)
	GetGCPTokenExpiry(context.Context, *GetGCPTokenExpiryRequest) (*GetGCPTokenExpiryResponse, error)
	DeleteGCPToken(context.Context, *DeleteGCPTokenRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGCSFuseProxyServiceServer()
}

// UnimplementedGCSFuseProxyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGCSFuseProxyServiceServer struct {
}

func (UnimplementedGCSFuseProxyServiceServer) MountGCS(context.Context, *MountGCSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MountGCS not implemented")
}
func (UnimplementedGCSFuseProxyServiceServer) PutGCPToken(context.Context, *PutGCPTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutGCPToken not implemented")
}
func (UnimplementedGCSFuseProxyServiceServer) GetGCPTokenExpiry(context.Context, *GetGCPTokenExpiryRequest) (*GetGCPTokenExpiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGCPTokenExpiry not implemented")
}
func (UnimplementedGCSFuseProxyServiceServer) DeleteGCPToken(context.Context, *DeleteGCPTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGCPToken not implemented")
}
func (UnimplementedGCSFuseProxyServiceServer) mustEmbedUnimplementedGCSFuseProxyServiceServer() {}

// UnsafeGCSFuseProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GCSFuseProxyServiceServer will
// result in compilation errors.
type UnsafeGCSFuseProxyServiceServer interface {
	mustEmbedUnimplementedGCSFuseProxyServiceServer()
}

func RegisterGCSFuseProxyServiceServer(s grpc.ServiceRegistrar, srv GCSFuseProxyServiceServer) {
	s.RegisterService(&GCSFuseProxyService_ServiceDesc, srv)
}

func _GCSFuseProxyService_MountGCS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountGCSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSFuseProxyServiceServer).MountGCS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GCSFuseProxyService/MountGCS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSFuseProxyServiceServer).MountGCS(ctx, req.(*MountGCSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSFuseProxyService_PutGCPToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutGCPTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSFuseProxyServiceServer).PutGCPToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GCSFuseProxyService/PutGCPToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSFuseProxyServiceServer).PutGCPToken(ctx, req.(*PutGCPTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSFuseProxyService_GetGCPTokenExpiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGCPTokenExpiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSFuseProxyServiceServer).GetGCPTokenExpiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GCSFuseProxyService/GetGCPTokenExpiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSFuseProxyServiceServer).GetGCPTokenExpiry(ctx, req.(*GetGCPTokenExpiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCSFuseProxyService_DeleteGCPToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGCPTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCSFuseProxyServiceServer).DeleteGCPToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GCSFuseProxyService/DeleteGCPToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCSFuseProxyServiceServer).DeleteGCPToken(ctx, req.(*DeleteGCPTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GCSFuseProxyService_ServiceDesc is the grpc.ServiceDesc for GCSFuseProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GCSFuseProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GCSFuseProxyService",
	HandlerType: (*GCSFuseProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MountGCS",
			Handler:    _GCSFuseProxyService_MountGCS_Handler,
		},
		{
			MethodName: "PutGCPToken",
			Handler:    _GCSFuseProxyService_PutGCPToken_Handler,
		},
		{
			MethodName: "GetGCPTokenExpiry",
			Handler:    _GCSFuseProxyService_GetGCPTokenExpiry_Handler,
		},
		{
			MethodName: "DeleteGCPToken",
			Handler:    _GCSFuseProxyService_DeleteGCPToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gcsfuse_proxy.proto",
}
